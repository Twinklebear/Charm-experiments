module data_parallel {
	// Message sent between regions to send their sizes around
	message BoundsMessage;
	// Message sent to master when a distributed tile is completed
	message TileCompleteMessage;
	// Message sent to a region that it should intersect the ray
	// with its local data, and continue it if needed
	message IntersectRayMessage;
	// Message sent to a region that it is responsible for shading the ray
	message ShadeRayMessage;
	// Message sent to the primary ray owner when a ray is completed
	message RayResultMessage;

	// A Region is a AABB in the world containing some of the
	// distributed scene data.
	array[1D] Region {
		entry Region();
		// TODO: Eventually this would load some large
		// mesh file in some distributed fashion
		entry void load();
		// Receive another region's bounds
		entry void send_bounds(BoundsMessage *msg);
		// Render the region tiles which this region projects to,
		// compute and send primary rays for any pixels where this Region is the closest box
		entry void render();
		// Send a ray for traversal through this region's data.
		entry void intersect_ray(IntersectRayMessage *msg);
		// Send a ray for shading by this region's data. This region should
		// be the one who owns the object being shaded
		entry void shade_ray(ShadeRayMessage *msg);
		// Report results from a ray owned by this region
		entry void report_ray(RayResultMessage *msg);
	};
}

